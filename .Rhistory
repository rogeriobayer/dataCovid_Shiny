#-------------------------------------------------------------------------------
#--- Seleciona variÃ¡veis numÃ©ricas, e registros completos
vars <- sapply(1:ncol(merge_data12_df), function(i){
class(merge_data12_df[,i])
})
names(merge_data12_df)
load(file = "./merge_data12_df.RData")
#--- Nomei linhas com as chaves de identificaÃ§Ã£o de cada dataset
rownames(data1_df) <- data1_df$COUNTRY
rownames(data2_df) <- data2_df$Name
#--- Gere um vetor de nomes comuns entre os dois datasets
country_names <- intersect(rownames(data1_df), rownames(data2_df))
#--- Alinha os dois datasets usando o vetor "country_names"
data1_df <- data1_df[country_names,]
data2_df <- data2_df[country_names,]
data2_df <- read.table(file = "D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD02 - Global Covid/WHO-COVID-19-global-table-data.csv",
sep=",", quote="\"",
header = T, stringsAsFactors =
#--- Verifica classe do object
class(data2_df)
#--- Verifica dimensÃ£o do 'data.frame'
dim(data2_df)
#' Este script acompanha o "ExercÃ­cio 2", carregando no RStudio os dados
#' indicados na tarefa EaD2.
################################################################################
### Carrega a tabela de dados "vaccination-data.csv" (data1_df)
################################################################################
data1_df <- read.table(file = "D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD02 - Global Covid/vaccination-data.csv", sep=",", quote="\"",
header = T, stringsAsFactors = F)
#--- Verifica nomes das variÃ¡veis nas colunas
colnames(data1_df)
# [1] "COUNTRY"                              "ISO3"
# [3] "WHO_REGION"                           "DATA_SOURCE"
# [5] "DATE_UPDATED"                         "TOTAL_VACCINATIONS"
# [7] "PERSONS_VACCINATED_1PLUS_DOSE"        "TOTAL_VACCINATIONS_PER100"
# [9] "PERSONS_VACCINATED_1PLUS_DOSE_PER100" "VACCINES_USED"
# [11] "FIRST_VACCINE_DATE"                   "NUMBER_VACCINES_TYPES_USED"
#--- Verifica classe do object
class(data1_df)
# "data.frame"
#--- Verifica dimensÃ£o do 'data.frame'
dim(data1_df)
# [1] 224  14
#--- Aqui uma simples, e inicial, verificaÃ§Ã£o de conteÃºdo
data1_df[1:3,1:6]
# COUNTRY ISO3 WHO_REGION DATA_SOURCE DATE_UPDATED TOTAL_VACCINATIONS
# 1    Afghanistan  AFG       EMRO   REPORTING   2021-06-02             626290
# 2        Albania  ALB       EURO   REPORTING   2021-05-23             710482
# 3        Algeria  DZA       AFRO   REPORTING   2021-05-31                 NA
################################################################################
### Carrega a tabela de dados "WHO-COVID-19-global-table-data.csv" (data2_df)
################################################################################
data2_df <- read.table(file = "D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD02 - Global Covid/WHO-COVID-19-global-table-data.csv",
sep=",", quote="\"",
header = T, stringsAsFactors = F)
#--- Verifica nomes das variÃ¡veis nas colunas
colnames(data2_df)
# [1] "Name"
# [2] "WHO.Region"
# [3] "Cases...cumulative.total"
# [4] "Cases...cumulative.total.per.100000.population"
# [5] "Cases...newly.reported.in.last.7.days"
# [6] "Cases...newly.reported.in.last.7.days.per.100000.population"
# [7] "Cases...newly.reported.in.last.24.hours"
# [8] "Deaths...cumulative.total"
# [9] "Deaths...cumulative.total.per.100000.population"
# [10] "Deaths...newly.reported.in.last.7.days"
# [11] "Deaths...newly.reported.in.last.7.days.per.100000.population"
# [12] "Deaths...newly.reported.in.last.24.hours"
# [13] "Transmission.Classification"
#--- Verifica classe do object
class(data2_df)
#[1] "data.frame"
#--- Verifica dimensÃ£o do 'data.frame'
dim(data2_df)
# [1] 238  13
#--- Aqui uma simples, e inicial, verificaÃ§Ã£o de conteÃºdo
data2_df[1:3,1:3]
# Name                            WHO.Region Cases...cumulative.total
# 1                   Global                                184324026
# 2 United States of America        Americas                 33392406
# 3                    India South-East Asia                 30663665
################################################################################
### Combina os datasets
################################################################################
#--- Verifica compatibilidade entre possiveis "chaves" para alinhamento
sum(data1_df$COUNTRY %in% data2_df$Name)
# [1] 221
sum(data1_df$WHO_REGION%in%data2_df$WHO.Region)
# [1] 0
#-------------------------------------------------------------------------------
#--- Executa alinhamento com a melhor 'chave' disponÃ­vel
#--- Verifica se hÃ¡ nomes duplicados
any(duplicated(data1_df$COUNTRY))
# [1] FALSE
any(duplicated(data2_df$Name))
# [1] FALSE
#--- Nomei linhas com as chaves de identificaÃ§Ã£o de cada dataset
rownames(data1_df) <- data1_df$COUNTRY
rownames(data2_df) <- data2_df$Name
#--- Gere um vetor de nomes comuns entre os dois datasets
country_names <- intersect(rownames(data1_df), rownames(data2_df))
#--- Alinha os dois datasets usando o vetor "country_names"
data1_df <- data1_df[country_names,]
data2_df <- data2_df[country_names,]
all(rownames(data1_df)==rownames(data2_df))
# [1] TRUE
#--- Verifica se hÃ¡ alguma duplicidade entre nomes de colunas
sum(colnames(data1_df) %in% colnames(data2_df))
# [1] 0
#-------------------------------------------------------------------------------
#--- Combina datasets alinhados, e salva no formato '.RData'
#--- para anÃ¡lises subsequentes
merge_data12_df <- cbind(data1_df, data2_df)
save(merge_data12_df, file = "merge_data12_df.RData")
View(merge_data12_df)
View(merge_data12_df)
names(merge_data12_df)
#' Este script acompanha o "ExercÃ­cio 4", carregando no RStudio os dados
#' indicados na tarefa EaD4.
################################################################################
### Carrega dados prÃ©-processados na tarefa EaD2 ("merge_data12_df.RData")
################################################################################
load(file = "./merge_data12_df.RData")
#-------------------------------------------------------------------------------
#--- Selecionar algumas variÃ¡veis de interesse para anÃ¡lise de associaÃ§Ã£o
names(merge_data12_df)
# [1] "COUNTRY"
# [2] "ISO3"
# [3] "WHO_REGION"
# [4] "DATA_SOURCE"
# [5] "DATE_UPDATED"
# [6] "TOTAL_VACCINATIONS"
# [7] "PERSONS_VACCINATED_1PLUS_DOSE"
# [8] "TOTAL_VACCINATIONS_PER100"
# [9] "PERSONS_VACCINATED_1PLUS_DOSE_PER100"
# [10] "PERSONS_FULLY_VACCINATED"
# [11] "PERSONS_FULLY_VACCINATED_PER100"
# [12] "VACCINES_USED"
# [13] "FIRST_VACCINE_DATE"
# [14] "NUMBER_VACCINES_TYPES_USED"
# [15] "Name"
# [16] "WHO.Region"
# [17] "Cases...cumulative.total"
# [18] "Cases...cumulative.total.per.100000.population"
# [19] "Cases...newly.reported.in.last.7.days"
# [20] "Cases...newly.reported.in.last.7.days.per.100000.population"
# [21] "Cases...newly.reported.in.last.24.hours"
# [22] "Deaths...cumulative.total"
# [23] "Deaths...cumulative.total.per.100000.population"
# [24] "Deaths...newly.reported.in.last.7.days"
# [25] "Deaths...newly.reported.in.last.7.days.per.100000.population"
# [26] "Deaths...newly.reported.in.last.24.hours"
# [27] "Transmission.Classification"
#-------------------------------------------------------------------------------
#--- Seleciona variÃ¡veis numÃ©ricas, e registros completos
vars <- sapply(1:ncol(merge_data12_df), function(i){
class(merge_data12_df[,i])
})
filt_data3_df <- merge_data12_df[,which(vars!="character")]
filt_data3_df <- filt_data3_df[complete.cases(filt_data3_df),]
dim(filt_data3_df)
# [1] 197  17
#-------------------------------------------------------------------------------
plot(x=filt_data3_df$PERSONS_FULLY_VACCINATED_PER100,
y=filt_data3_df$Deaths...newly.reported.in.last.24.hours,
xlab = "PERSONS_FULLY_VACCINATED_PER100",
ylab = "Deaths...newly.reported.in.last.24.hours")
#-------------------------------------------------------------------------------
#--- Run anova
fit <- lm(Deaths...newly.reported.in.last.24.hours ~  . ,
data=filt_data3_df)
fit <- anova(fit)
fit
#-------------------------------------------------------------------------------
# Generate a tidy table
library(broom)
tidy(fit)
################################################################################
### AnÃ¡lise de clusterizaÃ§Ã£o
################################################################################
#--- separa duas variaveis de interesse que iremos utilizar
x_df <- filt_data3_df[,c("PERSONS_FULLY_VACCINATED_PER100","Deaths...newly.reported.in.last.24.hours")]
#--- simplifica nomes de colunas e linhas
colnames(x_df) <- c("Persons.Vaccinated","Deaths.Reported")
rownames(x_df) <- substr(rownames(x_df), 1,15)
x_df$Persons.Vaccinated <- rank(x_df$Persons.Vaccinated)
x_df$Deaths.Reported <- rank(x_df$Deaths.Reported)
#--- roda anÃ¡lise de clisterizaÃ§Ã£o
dd <- dist(x_df)
hc <- hclust(dd, "ave")
plot(hc, cex=0.5)
load(file = "./merge_data12_df.RData")
names(merge_data12_df)
vars <- sapply(1:ncol(merge_data12_df), function(i){
class(merge_data12_df[,i])
})
filt_data3_df <- merge_data12_df[,which(vars!="character")]
filt_data3_df <- filt_data3_df[complete.cases(filt_data3_df),]
dim(filt_data3_df)
plot(x=filt_data3_df$PERSONS_FULLY_VACCINATED_PER100,
y=filt_data3_df$Deaths...newly.reported.in.last.24.hours,
xlab = "PERSONS_FULLY_VACCINATED_PER100",
ylab = "Deaths...newly.reported.in.last.24.hours")
#-------------------------------------------------------------------------------
plot(x=filt_data3_df$TOTAL_VACCINATIONS_PER100,
y=filt_data3_df$Deaths...newly.reported.in.last.24.hours,
xlab = "PERSONS_FULLY_VACCINATED_PER100",
ylab = "Deaths...newly.reported.in.last.24.hours")
fit <- lm(Deaths...newly.reported.in.last.24.hours ~  . ,
data=filt_data3_df)
fit <- anova(fit)
fit
library(broom)
tidy(fit)
x_df <- filt_data3_df[,c("PERSONS_FULLY_VACCINATED_PER100","Deaths...newly.reported.in.last.24.hours")]
#--- simplifica nomes de colunas e linhas
colnames(x_df) <- c("Persons.Vaccinated","Deaths.Reported")
rownames(x_df) <- substr(rownames(x_df), 1,15)
x_df$Persons.Vaccinated <- rank(x_df$Persons.Vaccinated)
x_df$Deaths.Reported <- rank(x_df$Deaths.Reported)
#--- roda anÃ¡lise de clisterizaÃ§Ã£o
dd <- dist(x_df)
hc <- hclust(dd, "ave")
plot(hc, cex=0.5)
x_df <- filt_data3_df[,c("PERSONS_FULLY_VACCINATED_PER100","Deaths...newly.reported.in.last.24.hours")]
x_df <- filt_data3_df[,c("TOTAL_VACCINATIONS_PER100","Deaths...newly.reported.in.last.24.hours")]
#--- simplifica nomes de colunas e linhas
colnames(x_df) <- c("Persons.Vaccinated","Deaths.Reported")
rownames(x_df) <- substr(rownames(x_df), 1,15)
x_df$Persons.Vaccinated <- rank(x_df$Persons.Vaccinated)
x_df$Deaths.Reported <- rank(x_df$Deaths.Reported)
#--- roda anÃ¡lise de clisterizaÃ§Ã£o
dd <- dist(x_df)
hc <- hclust(dd, "ave")
plot(hc, cex=0.5)
#-------------------------------------------------------------------------------
#--- Seleciona variÃ¡veis numÃ©ricas, e registros completos
vars <- sapply(1:ncol(merge_data12_df), function(i){
class(merge_data12_df[,i])
})
5
#' Este script acompanha o "ExercÃ­cio 5"
################################################################################
### Carrega dados prÃ©-processados na tarefa EaD2 ("merge_data12_df.RData")
################################################################################
load(file = "./merge_data12_df.RData")
#-------------------------------------------------------------------------------
#--- Selecionar algumas variÃ¡veis de interesse para anÃ¡lise de associaÃ§Ã£o
names(merge_data12_df)
# [1] "COUNTRY"
# [2] "ISO3"
# [3] "WHO_REGION"
# [4] "DATA_SOURCE"
# [5] "DATE_UPDATED"
# [6] "TOTAL_VACCINATIONS"
# [7] "PERSONS_VACCINATED_1PLUS_DOSE"
# [8] "TOTAL_VACCINATIONS_PER100"
# [9] "PERSONS_VACCINATED_1PLUS_DOSE_PER100"
# [10] "PERSONS_FULLY_VACCINATED"
# [11] "PERSONS_FULLY_VACCINATED_PER100"
# [12] "VACCINES_USED"
# [13] "FIRST_VACCINE_DATE"
# [14] "NUMBER_VACCINES_TYPES_USED"
# [15] "Name"
# [16] "WHO.Region"
# [17] "Cases...cumulative.total"
# [18] "Cases...cumulative.total.per.100000.population"
# [19] "Cases...newly.reported.in.last.7.days"
# [20] "Cases...newly.reported.in.last.7.days.per.100000.population"
# [21] "Cases...newly.reported.in.last.24.hours"
# [22] "Deaths...cumulative.total"
# [23] "Deaths...cumulative.total.per.100000.population"
# [24] "Deaths...newly.reported.in.last.7.days"
# [25] "Deaths...newly.reported.in.last.7.days.per.100000.population"
# [26] "Deaths...newly.reported.in.last.24.hours"
# [27] "Transmission.Classification"
#-------------------------------------------------------------------------------
#--- Seleciona variÃ¡veis numÃ©ricas, e registros completos
vars <- sapply(1:ncol(merge_data12_df), function(i){
class(merge_data12_df[,i])
})
filt_data3_df <- merge_data12_df[,which(vars!="character")]
filt_data3_df <- filt_data3_df[complete.cases(filt_data3_df),]
dim(filt_data3_df)
# [1] 200  17
#-------------------------------------------------------------------------------
#--- plot de dispersÃ£o
plot(x=filt_data3_df$PERSONS_FULLY_VACCINATED_PER100,
y=filt_data3_df$Deaths...newly.reported.in.last.7.days.per.100000.population,
xlab = "PERSONS_VACCINATED_1PLUS_DOSE_PER100",
ylab = "Deaths...newly.reported.in.last.7.days.per.100000.population")
#-------------------------------------------------------------------------------
#--- anova
fit <- lm(Deaths...newly.reported.in.last.7.days.per.100000.population ~  . ,
data=filt_data3_df)
fit <- anova(fit)
fit
################################################################################
### AnÃ¡lise de clusterizaÃ§Ã£o
################################################################################
#--- separa duas variaveis de interesse que iremos utilizar
x_df <- filt_data3_df[,c("PERSONS_VACCINATED_1PLUS_DOSE_PER100","Deaths...newly.reported.in.last.7.days.per.100000.population")]
#--- simplifica nomes de colunas e linhas
colnames(x_df) <- c("Persons.Vaccinated","Deaths.Reported")
rownames(x_df) <- substr(rownames(x_df), 1,15)
# x_df$Persons.Vaccinated <- rank(x_df$Persons.Vaccinated)
x_df$Deaths.Reported <- rank(x_df$Deaths.Reported)
#--- roda anÃ¡lise de clisterizaÃ§Ã£o
dd <- dist(x_df)
hc <- hclust(dd, "ave")
plot(hc, cex=0.3)
################################################################################
### Carrega dados prÃ©-processados na tarefa EaD3 ("merge_data12_df.RData")
################################################################################
library(RedeR)
library(TreeAndLeaf)
library(RColorBrewer)
library(igraph)
#--- separa duas variaveis de interesse que iremos utilizar
x_df <- filt_data3_df[,c("PERSONS_VACCINATED_1PLUS_DOSE_PER100",
"Deaths...newly.reported.in.last.7.days.per.100000.population")]
#--- simplifica nomes de colunas e linhas
colnames(x_df) <- c("Persons.Vaccinated","Deaths.Reported")
rownames(x_df) <- substr(rownames(x_df), 1,15)
# x_df$Persons.Vaccinated <- nrow(x_df) - rank(x_df$Persons.Vaccinated)
x_df$Deaths.Reported <- rank(x_df$Deaths.Reported)
#--- roda anÃ¡lise de clisterizaÃ§Ã£o
hc <- hclust(dist(x_df), "ave")
plot(hc, cex=0.3)
#--- gera um grafo com variaveis de interesse
tal <- treeAndLeaf(hc)
tal <- att.mapv(g = tal, dat = x_df, refcol = 0)
pal <- rev(brewer.pal(7, "RdYlGn"))
tal <- att.setv(g = tal, from = "Deaths.Reported",
to = "nodeColor", cols = pal, nquant = 5)
tal <- att.setv(g = tal, from = "Persons.Vaccinated",
to = "nodeSize", xlim = c(200, 20, 5), nquant = 5)
#--- ajusta alguns parametros do grafo
V(tal)$nodeFontSize[V(tal)$isLeaf] <- 60
#--- carrega interface de vizualizaÃ§Ã£o
rdp <- RedPort()
calld(rdp)
resetd(rdp)
#--- gera o grafo na interface de vizualizaÃ§Ã£o
addGraph(obj = rdp, g = tal, layout=NULL)
addLegend.color(obj = rdp, tal)
addLegend.size(obj = rdp, tal)
relax(rdp, ps = T)
library(RedeR)
library(TreeAndLeaf)
library(RColorBrewer)
library(igraph)
library(RedeR)
library(TreeAndLeaf)
library(RColorBrewer)
library(igraph)
################################################################################
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RedeR")
library(RedeR)
library(TreeAndLeaf)
library(RColorBrewer)
library(igraph)
#--- separa duas variaveis de interesse que iremos utilizar
x_df <- filt_data3_df[,c("PERSONS_VACCINATED_1PLUS_DOSE_PER100","Deaths...newly.reported.in.last.7.days.per.100000.population")]
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TreeAndLeaf")
library(RedeR)
library(TreeAndLeaf)
library(RColorBrewer)
library(igraph)
library(RedeR)
library(TreeAndLeaf)
library(RColorBrewer)
library(igraph)
#--- separa duas variaveis de interesse que iremos utilizar
x_df <- filt_data3_df[,c("PERSONS_VACCINATED_1PLUS_DOSE_PER100",
"Deaths...newly.reported.in.last.7.days.per.100000.population")]
#--- simplifica nomes de colunas e linhas
colnames(x_df) <- c("Persons.Vaccinated","Deaths.Reported")
rownames(x_df) <- substr(rownames(x_df), 1,15)
# x_df$Persons.Vaccinated <- nrow(x_df) - rank(x_df$Persons.Vaccinated)
x_df$Deaths.Reported <- rank(x_df$Deaths.Reported)
#--- roda anÃ¡lise de clisterizaÃ§Ã£o
hc <- hclust(dist(x_df), "ave")
plot(hc, cex=0.3)
#--- gera um grafo com variaveis de interesse
tal <- treeAndLeaf(hc)
tal <- att.mapv(g = tal, dat = x_df, refcol = 0)
pal <- rev(brewer.pal(7, "RdYlGn"))
tal <- att.setv(g = tal, from = "Deaths.Reported",
to = "nodeColor", cols = pal, nquant = 5)
tal <- att.setv(g = tal, from = "Persons.Vaccinated",
to = "nodeSize", xlim = c(200, 20, 5), nquant = 5)
#--- ajusta alguns parametros do grafo
V(tal)$nodeFontSize[V(tal)$isLeaf] <- 60
#--- carrega interface de vizualizaÃ§Ã£o
rdp <- RedPort()
calld(rdp)
resetd(rdp)
#--- gera o grafo na interface de vizualizaÃ§Ã£o
addGraph(obj = rdp, g = tal, layout=NULL)
addLegend.color(obj = rdp, tal)
addLegend.size(obj = rdp, tal)
relax(rdp, ps = T)
calld(rdp, checkcalls=TRUE)
library(RedeR)
library(TreeAndLeaf)
library(RColorBrewer)
library(igraph)
#--- separa duas variaveis de interesse que iremos utilizar
x_df <- filt_data3_df[,c("PERSONS_VACCINATED_1PLUS_DOSE_PER100",
"Deaths...newly.reported.in.last.7.days.per.100000.population")]
#--- simplifica nomes de colunas e linhas
colnames(x_df) <- c("Persons.Vaccinated","Deaths.Reported")
rownames(x_df) <- substr(rownames(x_df), 1,15)
# x_df$Persons.Vaccinated <- nrow(x_df) - rank(x_df$Persons.Vaccinated)
x_df$Deaths.Reported <- rank(x_df$Deaths.Reported)
#--- roda anÃ¡lise de clisterizaÃ§Ã£o
hc <- hclust(dist(x_df), "ave")
plot(hc, cex=0.3)
#--- gera um grafo com variaveis de interesse
tal <- treeAndLeaf(hc)
tal <- att.mapv(g = tal, dat = x_df, refcol = 0)
pal <- rev(brewer.pal(7, "RdYlGn"))
tal <- att.setv(g = tal, from = "Deaths.Reported",
to = "nodeColor", cols = pal, nquant = 5)
tal <- att.setv(g = tal, from = "Persons.Vaccinated",
to = "nodeSize", xlim = c(200, 20, 5), nquant = 5)
#--- ajusta alguns parametros do grafo
V(tal)$nodeFontSize[V(tal)$isLeaf] <- 60
#--- carrega interface de vizualizaÃ§Ã£o
rdp <- RedPort()
calld(rdp)
resetd(rdp)
#--- gera o grafo na interface de vizualizaÃ§Ã£o
addGraph(obj = rdp, g = tal, layout=NULL)
addLegend.color(obj = rdp, tal)
addLegend.size(obj = rdp, tal)
relax(rdp, ps = T)
BiocManager::install(c("GenomicFeatures", "AnnotationDbi"))
library(RedeR)
library(TreeAndLeaf)
library(RColorBrewer)
library(igraph)
#--- separa duas variaveis de interesse que iremos utilizar
x_df <- filt_data3_df[,c("PERSONS_VACCINATED_1PLUS_DOSE_PER100",
"Deaths...newly.reported.in.last.7.days.per.100000.population")]
#--- simplifica nomes de colunas e linhas
colnames(x_df) <- c("Persons.Vaccinated","Deaths.Reported")
rownames(x_df) <- substr(rownames(x_df), 1,15)
# x_df$Persons.Vaccinated <- nrow(x_df) - rank(x_df$Persons.Vaccinated)
x_df$Deaths.Reported <- rank(x_df$Deaths.Reported)
#--- roda anÃ¡lise de clisterizaÃ§Ã£o
hc <- hclust(dist(x_df), "ave")
plot(hc, cex=0.3)
#--- gera um grafo com variaveis de interesse
tal <- treeAndLeaf(hc)
tal <- att.mapv(g = tal, dat = x_df, refcol = 0)
pal <- rev(brewer.pal(7, "RdYlGn"))
tal <- att.setv(g = tal, from = "Deaths.Reported",
to = "nodeColor", cols = pal, nquant = 5)
tal <- att.setv(g = tal, from = "Persons.Vaccinated",
to = "nodeSize", xlim = c(200, 20, 5), nquant = 5)
#--- ajusta alguns parametros do grafo
V(tal)$nodeFontSize[V(tal)$isLeaf] <- 60
#--- carrega interface de vizualizaÃ§Ã£o
rdp <- RedPort()
calld(rdp)
resetd(rdp)
#--- gera o grafo na interface de vizualizaÃ§Ã£o
addGraph(obj = rdp, g = tal, layout=NULL)
addLegend.color(obj = rdp, tal)
addLegend.size(obj = rdp, tal)
relax(rdp, ps = T)
sudo R CMD javareconf
sudo R CMD javareconf
shiny::runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp()
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp()
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp()
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
View(merge_data12_df)
runApp()
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp()
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp()
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp()
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
runApp('D:/Desktop/TADS 4/Bioinformática e Biologia Computacional/EAD6 - Shiny/covidData/CovidData')
